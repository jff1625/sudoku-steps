import { describe, expect, it } from "vitest";
import { generateMissingNumberBoard } from "./missingNumberGenerator.ts";

describe("generateMissingNumberBoard (snapshot style)", () => {
  function fakeRngSeq(seq: number[]) {
    let i = 0;
    return (min: number, max: number) => {
      // Clamp to range
      const val = seq[i++ % seq.length];
      return Math.max(min, Math.min(max, val));
    };
  }

  it("produces a stable board for a fixed RNG sequence (horizontal)", () => {
    const rng = fakeRngSeq([
      2,
      5,
      1,
      7,
      3,
      0,
      8,
      4,
      6,
      2,
      1,
      0,
      5,
      7,
      8,
      3,
      4,
      6,
    ]);
    const board = generateMissingNumberBoard(
      { orientation: "horizontal" },
      rng,
    );
    expect(board.map((col) => col.map((cell) => cell.value)))
      .toMatchInlineSnapshot(`
        [
          [
            "",
            "",
            "",
            "",
            "",
            7,
            "",
            "",
            "",
          ],
          [
            1,
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
          ],
          [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
          ],
          [
            "",
            "",
            "",
            "",
            "",
            4,
            "",
            "",
            "",
          ],
          [
            "",
            "",
            "",
            "",
            "",
            8,
            "",
            "",
            "",
          ],
          [
            "",
            "",
            "",
            "",
            "",
            6,
            "",
            "",
            "",
          ],
          [
            "",
            "",
            "",
            "",
            "",
            2,
            "",
            "",
            "",
          ],
          [
            "",
            "",
            "",
            "",
            "",
            5,
            "",
            "",
            "",
          ],
          [
            "",
            "",
            "",
            "",
            "",
            9,
            "",
            "",
            "",
          ],
        ]
      `);
  });

  it("produces a stable board for a fixed RNG sequence (vertical)", () => {
    const rng = fakeRngSeq([
      2,
      5,
      1,
      7,
      3,
      0,
      8,
      4,
      6,
      2,
      1,
      0,
      5,
      7,
      8,
      3,
      4,
      6,
    ]);
    const board = generateMissingNumberBoard({ orientation: "vertical" }, rng);
    expect(board.map((col) => col.map((cell) => cell.value)))
      .toMatchInlineSnapshot(`
        [
          [
            "",
            1,
            "",
            "",
            "",
            "",
            "",
            "",
            "",
          ],
          [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
          ],
          [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
          ],
          [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
          ],
          [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
          ],
          [
            7,
            "",
            "",
            4,
            8,
            6,
            2,
            5,
            9,
          ],
          [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
          ],
          [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
          ],
          [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
          ],
        ]
      `);
  });
});
